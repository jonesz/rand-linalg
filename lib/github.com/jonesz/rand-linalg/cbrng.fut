module type cbrng_engine = {
  -- | The type generated by the engine.
  type t

  -- | The type of the key the engine is parameterized by.
  type k

  -- | Generate a single random element corresponding to the passed key and counter.
  val rand : k -> (ctr: i64) -> t

  -- | The minimum value potentially returned by the generator.
  val min : t

  -- | The maximum value potentially returned by the generator.
  val max : t
}

-- | "Squares: A Fast Counter-Based RNG" - https://arxiv.org/pdf/2004.06278
module squares32 : cbrng_engine with t = u32 with k = i64 = {
  type t = u32
  type k = i64

  def rand key ctr =
    let round x b =
      let shift a = (a >> 32) | (a << 32)
      in (i64.**) x 2 |> (+) b |> shift
    let x = ctr * key
    let y = ctr * key
    let z = y + key
    in round x y |> flip (round) z |> flip (round) y |> flip (i64.**) 2 |> (+) z |> flip (>>) 32 |> u32.i64

  def min = u32.lowest
  def max = u32.highest
}
